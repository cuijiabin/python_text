# coding=utf-8

# coding=utf-8
import sched
import time
from datetime import datetime
import requests
from multiprocessing import Queue
from collections import deque

queue = deque()
f_data = [4039345, 4072701, 4072797, 4072798, 4072803, 4072809, 4072810, 4072816, 4075316, 4075424, 4075436, 4075438,
          4075543, 4075562, 4075583, 4075584, 4075852, 4077123, 4077124, 4077125, 4077163, 4077167, 4077170, 4077211,
          4077213, 4077227, 4087279, 4095695, 4098372, 4099020, 4099392, 4099456, 4099544, 4099577, 4099637, 4099753,
          4099760, 4099770, 4099790, 4099792, 4099794, 6661128, 6694277, 6830044, 6858310, 6935337, 6983591, 7017990,
          7027888, 7027934, 7028339, 7028428, 7028451, 7028466, 7028467, 7028468, 7028469, 7028470, 7028471, 7028486,
          7028487, 7028489, 7028490, 7028507, 7028508, 7028509, 7028513, 7028586, 7028640, 7028641, 7028642, 7028643,
          7028715, 7028864, 7028865, 7028866, 7028867, 7028868, 7028872, 7028873, 7028874, 7028875, 7028876, 7028881,
          7028882, 7028883, 7028889, 7028898, 7028899, 7028900, 7028998, 7028999, 7029000, 7029025, 7029026, 7029027,
          7029048, 7029071, 7029072, 7029074, 7029075, 7029501, 7029502, 7029504, 7029506, 7029543, 7029595, 7029599,
          7029609, 7029627, 7029629, 7029631, 7029632, 7029633, 7029661, 7029662, 7029675, 7029697, 7029705, 7029845,
          7029854, 7029872, 7029888, 7029893, 7029899, 7029961, 7029976, 7030009, 7030043, 7030058, 7030095, 7030312,
          7030338, 7030385, 7030406, 7030465, 7030499, 7030567, 7030616, 7030621, 7030799, 7030813, 7030814, 7030889,
          7030892, 7030913, 7030920, 7030941, 7030961, 7030994, 7030999, 7031005, 7031015, 7031018, 7031024, 7031044,
          7031070, 7031072, 7031076, 7031077, 7031080, 7031084, 7031085, 7031087, 7031089, 7031090, 7031091, 7031093,
          7031094, 7031095, 7031096, 7031097, 7031098, 7031139, 7031140, 7031141, 7031142, 7031143, 7031144, 7031145,
          7031146, 7031147, 7031148, 7031149, 7031150, 7031151, 7031152, 7031153, 7031154, 7031155, 7031156, 7031157,
          7031158, 7031159, 7031160, 7031161, 7031178, 7031179, 7031192, 7031193, 7031194, 7031278, 7031302, 7031544,
          7031545, 7031616, 7031617, 7031618, 7031700, 7031701, 7031702, 7031727, 7031728, 7031757, 7031758, 7031759,
          7031810, 7031811, 7031812, 7031835, 7033579, 7033580, 7033581, 7033582, 7033583, 7033584, 7033585, 7034302,
          7034303, 7034304, 7034310, 7034531, 7034579, 7034580, 7034584, 7034585, 7034586, 7034587, 7034588, 7034589,
          7034634, 7034635, 7034636, 7034637, 7034638, 7034639, 7034640, 7034641, 7034743, 7034744, 7034782, 7034783,
          7034792, 7034793, 7034860, 7035060, 7035061, 7035094, 7035184, 7035185, 7035275, 7035454, 7035455, 7035617,
          7035618, 7035715, 7035716, 7035995, 7035996, 7036260, 7036261, 7036282, 7036283, 7036284, 7036287, 7036288,
          7036308, 7036309, 7036504, 7036740, 7036982, 7037011, 7037012, 7037391, 7037998, 7037999, 7038105, 7038106,
          7038170, 7038183, 7038196, 7038197, 7038213, 7038214, 7038216, 7038217, 7038218, 7038219, 7038222, 7038223,
          7038241, 7038261, 7038303, 7038304, 7038395, 7038396, 7038397, 7038398, 7038399, 7038493, 7038494, 7038495,
          7038528, 7038529, 7038549, 7038550, 7038551, 7038574, 7038587, 7038597, 7038598, 7038599, 7038600, 7038709,
          7038764, 7038765, 7038766, 7038767, 7038768, 7038769, 7038770, 7038771, 7038784, 7038785, 7038786, 7038864,
          7038865, 7038898, 7038899, 7039583, 7039740, 7039741, 7039749, 7039752, 7039848, 7040236, 7040237, 7040304,
          7040305, 7040306, 7040307, 7040308, 7040309, 7040310, 7040311, 7040357, 7040358, 7040359, 7040360, 7040463,
          7040506, 7040515, 7040681, 7040689, 7040690, 7040711, 7040728, 7040729, 7040730, 7040735, 7040773, 7040783,
          7040785, 7040786, 7040790, 7040792, 7040793, 7040810, 7040811, 7040837, 7040838, 7040839, 7040849, 7040850,
          7040851, 7040854, 7040855, 7040856, 7040857, 7040858, 7040860, 7040861, 7040862, 7040863, 7040864, 7040865,
          7040866, 7040867, 7040868, 7040905, 7040906, 7040918, 7040968, 7040973, 7040978, 7040979, 7040982, 7041085,
          7041168, 7041199, 7041227, 7041296, 7041482, 7041535, 7042212, 7042942, 7042945, 7042992, 7043022, 7043080,
          7043081, 7043091, 7043250, 7043269, 7043728, 7043729, 7043730, 7043731, 7043732, 7043733, 7043734, 7043735,
          7043736, 7043737, 7043738, 7043828, 7043829, 7043935, 7044786, 7044791, 7044822, 7044825, 7044845, 7044870,
          7044880, 7044881, 7044882, 7044883, 7045135, 7045271, 7045314, 7045315, 7045423, 7045424, 7045425, 7045428,
          7045429, 7045430, 7045431, 7045432, 7045433, 7045434, 7045444, 7045445, 7045446, 7045447, 7045448, 7045449,
          7045450, 7045452, 7045453, 7045493, 7045554, 7045555, 7045636, 7045714, 7045781, 7045852, 7045853, 7045929,
          7045934, 7045935, 7045936, 7045975, 7046000, 7046001, 7046002, 7046009, 7046247, 7046248, 7046249, 7046318,
          7046376, 7046393, 7046394, 7046395, 7046396, 7046409, 7046410, 7046411, 7046436, 7046459, 7046499, 7046500,
          7046501, 7046502, 7046503, 7046505, 7046506, 7046508, 7046509, 7046510, 7046513, 7046514, 7046516, 7046517,
          7046518, 7046519, 7046521, 7046522, 7046523, 7046532, 7046535, 7046547, 7046548, 7046630, 7046673, 7046750,
          7046782, 7046817]
# print("本次需要跑出的数组长度 ", len(f_data))
for dd in f_data:
    queue.append(dd)

# 初始化sched模块的 scheduler 类
# 第一个参数是一个可以返回时间戳的函数，第二个参数可以在定时未到达之前阻塞。
schedule = sched.scheduler(time.time, time.sleep)


# 被周期性调度触发的函数
def printTime(inc):
    if len(queue) > 0:
        itemId = queue.popleft()
        r = requests.post(
            "http://yuerp.miyabaobei.com:8083//product/costPrice/costPriceList.htm?resourceSn=" + str(itemId))
        # print(r.content.decode("utf-8"))
        # print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), itemId)
        schedule.enter(inc, 0, printTime, (inc,))
        # else:
        # print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "完成了")


# 默认参数60s
def checkGen(inc=60):
    schedule.enter(0, 0, printTime, (inc,))
    schedule.run()


# 10s 输出一次
checkGen(0.5)
